# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H7I2geqFaktcPOskN9BcdJaZXkC115gf
"""



import pandas as pd
from sklearn.model_selection import train_test_split
df = pd.read_csv('data.csv')
X = pd.get_dummies(df.drop(['O'], axis=1))
y = df['O']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)
y_train.head()

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score
from tensorflow.keras.optimizers import Adam
import tensorflow as tf


# Instantiate the optimizer with the custom learning rate schedule
optimizer = Adam(learning_rate=0.1)

model = Sequential()
model.add(Dense(units=3, activation='relu', input_shape=(3,)))
model.add(Dense(units=6, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer=optimizer, loss='mse')

'''class WO(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epock, logs=None):
        for i, layer in enumerate(model.layers):
            weights, biases = layer.get_weights()
            print("\nW ", weights)
            print("B ", biases);'''
#callbacks=[WO()]
model.fit(X_train, y_train, epochs=20, )

y_hat = model.predict(X_test)

test = pd.DataFrame({
    'i1': [1],
    'i2': [7],
    'i3': [5]
})

print(model.predict(test))

model.save('tfmodel')

del model

model = load_model('tfmodel')